#
# Aug 29, 2014--copied this from steeef for my own purposes.
#
# A theme based on Steve Losh's Extravagant Prompt with vcs_info integration.
#
# Authors:
#   Steve Losh <steve@stevelosh.com>
#   Bart Trojanowski <bart@jukie.net>
#   Brian Carper <brian@carper.ca>
#   steeef <steeef@gmail.com>
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# Screenshots:
#   http://i.imgur.com/HyRvv.png
#

# Call this to check for untracked hg changes in the prompt. This will slow
# down even non-hg prompts, so only use it if you need it or are working with
# a lot of hg repos.
function hg_check_for_untracked_files {
  DO_HG=true
}

# This is a function that indicates when a specific directory should enable
# vcs_info's check-for-changes functionality. This can be expensive, so we want
# to support conditional disabling in case someone is workin on a huge project
# like chromium, where the prompt would become very slow. Machines should add
# directories to their specific configuration in
# ZSHMS_VCSINFO_NO_CHECK_CHANGES. This must contain an Array.
#
# This was based on:
# https://github.com/johan/zsh/blob/master/Misc/vcs_info-examples#L88-L102,
# with added support for machine-specific changes.
#
function do_check_for_changes() {
  # NB: The return values here are counterintuitive to me, who has recently
  # been working in JavaScript. In zsh 0 is true and >0 is false (at least for
  # the purposes of if checks). This seems marginally less insane if you think
  # of return values as 0 success, >0 an error. In this case we'll return 0 for
  # no match, or to DO check for changes, and 1 for a match, or to NOT check
  # for changes.
  local d

  for d in ${ZSHMS_VCSINFO_NO_CHECK_CHANGES}; do
    d=${d%/##}
    [[ $PWD == $d(|/*) ]] && return 1
  done
  # We didn't match a list of forbidden directories.
  return 0
}

function prompt_steeef_precmd {
  # According to the creator of this function (maybe steeef?), vcs_info does
  # not check for untracked files via any option. Thus we are going to hard
  # code it into the prompt itself.
  #
  # We only want to do this hardcoding if do_check_for_changes returns true.
  # Otherwise we will not.
  git_branch_format=" [${_prompt_colors[2]}%b%f%u%c]"
  if do_check_for_changes; then
    # Check for untracked files via an external call, updating the prompt as
    # appropriate. Do nothing if we fail the check, as we've set the default
    # prompt above.
    if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
      git_branch_format=" [${_prompt_colors[2]}%b%f%u%c${_prompt_colors[4]}?%f]"
    fi
  fi

  zstyle ':vcs_info:git*:prompt:*' formats "${git_branch_format}"

  # check for untracked hg files as well.
  # This can be slow and is unnecessary if you're not using hg. So set this to
  # false. Callers working with hg a lot will have to just know that they
  # should execute `DO_HG=true` if they want to be checking for untracked files
  # in an hg repo.
  if [[ ${DO_HG:=false} = true && -n $(hg status -u 2>/dev/null) ]]; then
    hg_branch_format=" (${_prompt_colors[3]}%b%f%c%u${_prompt_colors[4]}?%f)"
  else
    hg_branch_format=" (${_prompt_colors[3]}%b%f%c%u)"
  fi

  zstyle ':vcs_info:hg*:prompt:*' formats "${hg_branch_format}"

  vcs_info 'prompt'

  if (( $+functions[python-info] )); then
    python-info
  fi
}

function prompt_steeef_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  # Add hook for calling vcs_info before each command.
  add-zsh-hook precmd prompt_steeef_precmd

  # Use extended color pallete if available.
  if [[ $TERM = *256color* || $TERM = *rxvt* ]]; then
    _prompt_colors=(
      "%F{81}"  # Turquoise
      "%F{166}" # Orange
      "%F{135}" # Purple
      "%F{161}" # Hotpink
      "%F{118}" # Limegreen
      "%F{075}" # electric blue
      "%F{033}" # fino blue
      "%F{059}" # dull
      "%F{226}" # yellow
    )
  else
    _prompt_colors=(
      "%F{cyan}"
      "%F{yellow}"
      "%F{magenta}"
      "%F{red}"
      "%F{green}"
      "%F{cyan}"    # cyan, b/c can't replicate fino blue
      "%F{cyan}"
      "%F{cyan}"
      "$F{yellow}"
    )
  fi

  # Formats:
  #   %b - branchname
  #   %u - unstagedstr (see below)
  #   %c - stagedstr (see below)
  #   %a - action (e.g. rebase-i)
  #   %R - repository path
  #   %S - path in the repository
  local git_branch_format="${_prompt_colors[2]}%b%f%u%c"
  local git_action_format="${_prompt_colors[4]}|%a%f"
  local git_ungit_staged_format="${_prompt_colors[4]}*%f"
  local git_staged_format="${_prompt_colors[5]}*%f"

  local hg_branch_format="${_prompt_colors[3]}%b%f%c%u"
  local hg_action_format="${_prompt_colors[4]}|%a%f"
  local hg_unstaged_format="${_prompt_colors[9]}*%f"
  #local hg_staged_format="${_prompt_colors[4]}*%f"

  # Set vcs_info parameters.
  zstyle ':vcs_info:*' enable git hg

  # See the comment at the definition of do_check_for_changes to see the source
  # of this method.
  zstyle -e ':vcs_info:*:prompt:*' check-for-changes \
    'do_check_for_changes && reply=( true ) || reply=( false )'

  # git params
  zstyle ':vcs_info:git*:prompt:*' unstagedstr "${git_ungit_staged_format}"
  zstyle ':vcs_info:git*:prompt:*' stagedstr "${git_staged_format}"
  zstyle ':vcs_info:git*:prompt:*' actionformats " [${git_branch_format}${git_action_format}]"
  zstyle ':vcs_info:git*:prompt:*' formats " [${git_branch_format}]"

  # and now we want the hg ones.
  zstyle ':vcs_info:hg*:*' branchformat "%b"
  zstyle ':vcs_info:hg*' get-revision true
  zstyle ':vcs_info:hg*:prompt:*' unstagedstr "${hg_unstaged_format}"
  #zstyle ':vcs_info:hg*:prompt:*' stagedstr "${hg_staged_format}"
  zstyle ':vcs_info:hg*:prompt:*' actionformats " (${hg_branch_format}${hg_action_format})"
  zstyle ':vcs_info:hg*:prompt:*' formats " (${hg_branch_format})"

  zstyle ':vcs_info:*:prompt:*' nvcsformats   ""

  # Got this stuff from the dieter theme. That's dieter as a name, apparently,
  # not one who diets. The idea is to display the time and have it colored by
  # return code (red if >0).
  # local time, color coded by last return code
  time_enabled="%(?.${${_prompt_colors[8]}%}.%{${_prompt_colors[4]}%})%*%{$reset_color%}"
  time_disabled="${fino_green}%*%{$reset_color%}"
  time=$time_enabled

  # Set python-info parameters.
  zstyle ':prezto:module:python:info:virtualenv' format '(%v)'

  # Define prompts.
  PROMPT="
${_prompt_colors[8]}${time}%f ${_prompt_colors[8]}in ${_prompt_colors[8]}%~%f 
"'$python_info[virtualenv]'"${_prompt_colors[6]}%1d%f"'${vcs_info_msg_0_}'" ${_prompt_colors[6]}$%f "
  #RPROMPT='${_prompt_colors[5]}%n@%m%f'
  #PROMPT="
#${_prompt_colors[3]}%n%f at ${_prompt_colors[2]}%m%f in ${_prompt_colors[5]}%~%f "'${vcs_info_msg_0_}'"
#"'$python_info[virtualenv]'"$ "
  #RPROMPT=''
}

prompt_steeef_setup "$@"

# ex: filetype=zsh
