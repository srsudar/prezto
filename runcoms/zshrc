#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# Cribbing the spectrum_ls command from oh my zsh.

function spectrum_ls() {
  for code in {000..255}; do
    print -P -- "$code: %F{$code}fancy FANCY text%f"
  done
}

# Show all 256 colors where the background is set to specific color
function spectrum_bls() {
  for code in {000..255}; do
    print -P -- "$BG[$code]$code: fancy FANCY text %{$reset_color%}"
  done
}

# Aug 30, 2014.
# Porting stuff over from my bash_profile

# July 2, 2012. Command to get my ip address.
alias myip="ifconfig | grep 'inet ' | grep -v '127.0.0.1' | cut -d\  -f2"

alias attux="ssh -X sudars@attu.cs.washington.edu"
alias attu="ssh sudars@attu.cs.washington.edu"

# Jan 9, 2014
# Starts a python server serving the contents of the current file
alias serve="python -m SimpleHTTPServer 8888"

# May 20, 2014. Colorizing mvn output.
# Taken from: https://github.com/builddoctor/maven-antsy-color
# thanks to:  http://blog.blindgaenger.net/colorize_maven_output.html
# and: http://johannes.jakeapp.com/blog/category/fun-with-linux/200901/maven-colorized
# Colorize Maven Output
alias maven="command mvn"
function color_maven() {
    local BLUE="[0;34m"
    local RED="[0;31m"
    local LIGHT_RED="[1;31m"
    local LIGHT_GRAY="[0;37m"
    local LIGHT_GREEN="[1;32m"
    local LIGHT_BLUE="[1;34m"
    local LIGHT_CYAN="[1;36m"
    local YELLOW="[1;33m"
    local WHITE="[1;37m"
    local NO_COLOUR="[0m"
    maven $* | sed \
        -e "s/Tests run: \([^,]*\), Failures: \([^,]*\), Errors: \([^,]*\), Skipped: \([^,]*\)/${LIGHT_GREEN}Tests run: \1$NO_COLOUR, Failures: $RED\2$NO_COLOUR, Errors: $YELLOW\3$NO_COLOUR, Skipped: $LIGHT_BLUE\4$NO_COLOUR/g" \
        -e "s/\(\[\{0,1\}WARN\(ING\)\{0,1\}\]\{0,1\}.*\)/$YELLOW\1$NO_COLOUR/g" \
        -e "s/\(\[ERROR\].*\)/$RED\1$NO_COLOUR/g" \
        -e "s/\(\(BUILD \)\{0,1\}FAILURE.*\)/$RED\1$NO_COLOUR/g" \
        -e "s/\(\(BUILD \)\{0,1\}SUCCESS.*\)/$LIGHT_GREEN\1$NO_COLOUR/g" \
        -e "s/\(\[INFO\].*\)/$LIGHT_GRAY\1$NO_COLOUR/g"
    return $PIPESTATUS
}

alias mvn=color_maven

# Aug 30, 2014
# After prezto, ls is aliased to ls -G. I like the trailing /s and @s, so let's
# add the F option.
alias ls='ls -FG'
alias ll='ls -lhF'
alias la='ll -A'

# Aug 31, 2014
# Show the directory history. This works using the dh stack. See here for more
# neat deets:
# http://zsh.sourceforge.net/Intro/intro_6.html
alias dh='dirs -v'

# Sep 1, 2014.
# Annoyed with prezto's alias from rm to rm -i. Original output of `type rm`:
# .zprezto [master] $ type rm                                                                                                                             sudars@Sams-MacBook-# rm is an alias for nocorrect rm -i
# rm is /bin/rm
alias rm='nocorrect rm'

# Sep 2, 2014
# Somehow my editor ended up being nano after this. The horror.
# interesting answer as to the difference between these two:
# http://unix.stackexchange.com/questions/4859/visual-vs-editor-whats-the-difference
export VISUAL=vim
export EDITOR='vi -e'

# May 27, 2014
# This is required to avoid having to edit the default merge message in git.
export GIT_MERGE_AUTOEDIT=no

# Sep 18, 2014.
# Stop confirming history expansions. I.e. (as without an ie I'm never, ever
# going to remember what this actually does), with the power of expansion,
# !$ means the last word of the previous command. E.g.
# touch newfile
# chmod a+x !$
# means create that file and run the command `chmod a+x newfile`. However, with
# history confirmation, hitting enter actually expands this to
# `chmod a+x newfile` on a new prompt rather than just performing the 
# substitution and running it, like all other commands do. Annoying. So, change
# this. <TAB> will still perform it inline.
unsetopt HIST_VERIFY

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting


##############################################################################
# Machine and platform specific configuration.
##############################################################################

# ================
# Machine Specific
# ================

# Here we'll start custom sourcing zshrc files based on which machine we're on.
# There are several ways to do this. Some of my machines, namely my meerkat,
# consistently returns 'sam-meerkat' when running `hostname`. My mbair does
# not. For now, I am going to adopt a convention where each machine has its own
# name (e.g. mbair, meerkat). Each machine indicates it existence by the
# presences of a file named "~/.zshMachineFlag_machineName". E.g. mbair would,
# upon first time initialization, execute `touch ~/.zshMachineFlag_mbair`. For
# more configuration instructions, see my dotfiles and prezto READMEs.

if [[ -a ~/.zshMachineFlag_mbair ]]; then
  source "${ZDOTDIR:-$HOME}"/.zprezto/machine-specific/mbair_zshrc
fi

# =================
# Platform Specific
# =================

func source_platform_file() {
  local platform
  platform="$(uname -s)"

  case $platform in
    Linux)
      source "${ZDOTDIR:-$HOME}"/.zprezto/machine-specific/linux_zshrc
      ;;
    Darwin)
      source "${ZDOTDIR:-$HOME}"/.zprezto/machine-specific/osx_zshrc
      ;;
  esac
}

source_platform_file


##############################################################################
# END Machine and platform specific configuration.
##############################################################################
