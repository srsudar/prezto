#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# colors for ls that I like for some reason. I used to have them in
# modules/utility/init.zsh, where prezto defines defaults.
export LS_COLORS="di=96;40:ln=35;40:so=32;40:pi=33;40:ex=31;40:bd=34;46:cd=34;43:su=0;41:sg=0;46:tw=0;42:ow=0;43:"
export LSCOLORS="Gxfxcxdxbxegedabagacad"

# Cribbing the spectrum_ls command from oh my zsh.

function spectrum_ls() {
  for code in {000..255}; do
    print -P -- "$code: %F{$code}fancy FANCY text%f"
  done
}

# mmv to move many files easily
# http://www.mfasold.net/blog/2008/11/moving-or-renaming-multiple-files/
autoload -U zmv
alias mmv='noglob zmv -W'

# gawk is more portable than awk, making awk commands the same on mac and linux.
# This will require `brew install gawk` on mac. If there are downsides for mac,
# I'm not aware of them.
alias awk=gawk

# Show all 256 colors where the background is set to specific color
function spectrum_bls() {
  for code in {000..255}; do
    print -P -- "$BG[$code]$code: fancy FANCY text %{$reset_color%}"
  done
}

# Aug 30, 2014.
# Porting stuff over from my bash_profile

# July 2, 2012. Command to get my ip address.
alias myip="ifconfig | grep 'inet ' | grep -v '127.0.0.1' | cut -d\  -f2"

alias attux="ssh -X sudars@attu.cs.washington.edu"
alias attu="ssh sudars@attu.cs.washington.edu"

# Syntax highlighting at the shell. Must first install via:
# git clone https://github.com/zdharma/fast-syntax-highlighting ~/.zsh/fast-syntax-highlighting
source ~/.zsh/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
fast-theme -q free
# Suggestions from your history. Must first install via:
# git clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.zsh/zsh-autosuggestions
#
# Additionally, to complete a single token without leaving the home row, I
# configure `<ctrl>-;` to send a hex code. For iTerm on OSX, this happens in:
# Settings | Keys, and then add a shortcut with:
#   * Keyboard Shortcut: ^;
#   * Action: Send Hex Code
#   * (value): 0x1b 0x66
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

# Jan 9, 2014
# Starts a python server serving the contents of the current file
alias serve="python -m http.server 8888"
alias serve3="python3 -m http.server 8888"

# Clears the terminal deleting scrollback, making it easier to get to the top of
# a command output.
alias clearf="clear && printf '\e[3J'"

# May 20, 2014. Colorizing mvn output.
# Taken from: https://github.com/builddoctor/maven-antsy-color
# thanks to:  http://blog.blindgaenger.net/colorize_maven_output.html
# and: http://johannes.jakeapp.com/blog/category/fun-with-linux/200901/maven-colorized
# Colorize Maven Output
alias maven="command mvn"
function color_maven() {
    local BLUE="[0;34m"
    local RED="[0;31m"
    local LIGHT_RED="[1;31m"
    local LIGHT_GRAY="[0;37m"
    local LIGHT_GREEN="[1;32m"
    local LIGHT_BLUE="[1;34m"
    local LIGHT_CYAN="[1;36m"
    local YELLOW="[1;33m"
    local WHITE="[1;37m"
    local NO_COLOUR="[0m"
    maven $* | sed \
        -e "s/Tests run: \([^,]*\), Failures: \([^,]*\), Errors: \([^,]*\), Skipped: \([^,]*\)/${LIGHT_GREEN}Tests run: \1$NO_COLOUR, Failures: $RED\2$NO_COLOUR, Errors: $YELLOW\3$NO_COLOUR, Skipped: $LIGHT_BLUE\4$NO_COLOUR/g" \
        -e "s/\(\[\{0,1\}WARN\(ING\)\{0,1\}\]\{0,1\}.*\)/$YELLOW\1$NO_COLOUR/g" \
        -e "s/\(\[ERROR\].*\)/$RED\1$NO_COLOUR/g" \
        -e "s/\(\(BUILD \)\{0,1\}FAILURE.*\)/$RED\1$NO_COLOUR/g" \
        -e "s/\(\(BUILD \)\{0,1\}SUCCESS.*\)/$LIGHT_GREEN\1$NO_COLOUR/g" \
        -e "s/\(\[INFO\].*\)/$LIGHT_GRAY\1$NO_COLOUR/g"
    return $PIPESTATUS
}

alias mvn=color_maven

# Use OneHalfDark theme for bat (cat/less replacement,
# https://github.com/sharkdp/bat). To see themes in action:
# bat --list-themes | fzf --preview="bat --theme={} --color=always /path/to/file"
export BAT_THEME="OneHalfDark"

# Colorizing output is handled in machine-specific/<platform>_zshrc, as the
# argument varies across platforms.
alias ll='ls -lhF'
alias la='ll -A'

# Use less with rg
rg () {
  if [ -t 1 ]
  then
    command rg -p "$@" | less -RFX
  else
    command rg "$@"
  fi
}

# Aug 31, 2014
# Show the directory history. This works using the dh stack. See here for more
# neat deets:
# http://zsh.sourceforge.net/Intro/intro_6.html
alias dh='dirs -v'

# Sep 1, 2014.
# Annoyed with prezto's alias from rm to rm -i. Original output of `type rm`:
# .zprezto [master] $ type rm                                                                                                                             sudars@Sams-MacBook-# rm is an alias for nocorrect rm -i
# rm is /bin/rm
alias rm='nocorrect rm'

# Sep 2, 2014
# Somehow my editor ended up being nano after this. The horror.
# interesting answer as to the difference between these two:
# http://unix.stackexchange.com/questions/4859/visual-vs-editor-whats-the-difference
export VISUAL=vim
export EDITOR=vim

# Don't allow nested nvim instances when in nvim's terminal mode. Instead,
# remaps to nvr, which is neovim-remote, to open things in the existing neovim
# instance.
if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
  if [ -x "$(command -v nvr)" ]; then
    alias nvim=nvr
  else
   alias nvim='echo "No nesting!"'
  fi
fi

# Count word changes in a git commit. Modified from the below URL, with a few
# changes to accommodate my workflow.
alias gitwa='git diff --word-diff=porcelain | grep -e "^+[^+]" | wc -w | xargs'
alias gitwd='git diff --word-diff=porcelain | grep -e "^-[^-]" | wc -w | xargs'
alias gitw='echo $(($(gitwa) - $(gitwd)))'

# May 27, 2014
# This is required to avoid having to edit the default merge message in git.
export GIT_MERGE_AUTOEDIT=no

# Disable scroll lock. No more ctrl-s to freeze the terminal, with a ctrl-q to
# unfreeze.
stty -ixon

# Sep 18, 2014.
# Stop confirming history expansions. I.e. (as without an ie I'm never, ever
# going to remember what this actually does), with the power of expansion,
# !$ means the last word of the previous command. E.g.
# touch newfile
# chmod a+x !$
# means create that file and run the command `chmod a+x newfile`. However, with
# history confirmation, hitting enter actually expands this to
# `chmod a+x newfile` on a new prompt rather than just performing the 
# substitution and running it, like all other commands do. Annoying. So, change
# this. <TAB> will still perform it inline.
unsetopt HIST_VERIFY

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# Use ripgrep for fzf. This respects ignore files in version control. Don't
# search node_modules (`--iglob`).
export FZF_DEFAULT_COMMAND="rg --files --iglob='!node_modules'"
export FZF_CTRL_T_COMMAND="rg --files --iglob='!node_modules'"

#############
# BEGIN if you need to restrict FZF's files.
#############
# If you need to limit the file scope that FZF looks at, set a file like this
# and reference it with $(${FZF_SOURCE})
# export FZF_SOURCE="${HOME}/.zprezto/machine-specific/fzf_relevant-files.zsh"
# function create_fzf_command() {
#   rg --files $(${FZF_SOURCE})
# }

# These are weird because they're invoked via `sh -c` or something, so we need
# to pass in the functions we use. Man this is ugly af. Also can't set one to
# the other, they both need to be as-is. I am bad at zsh.
# export FZF_DEFAULT_COMMAND="$(functions create_fzf_command); create_fzf_command"
# export FZF_CTRL_T_COMMAND="$(functions create_fzf_command); create_fzf_command"
# export FZF_ALT_C_COMMAND="fdfind -t d . $(${FZF_SOURCE})"
#############
# END if you need to restrict FZF's files.
#############

# This generates a list of flags that have previously been used in history
# commands, trying to intelligently parse values for reuse on the prompt. For
# example, with the following history entry files (as shown on zsh):
#
# 1 foo --test --bar=val
# 2 foo -f 123 --bar val
#
# `_find_flags foo` should return:
#
# --test
# --bar
# --bar=val
# -f
# -f 123
# --bar val
_find_flags() {
  # $1 is passed to the function and should be the command.
  local match_prefix=$1
  fc -rl 1 | \
    # strip leading command number and trailing slashes. Trailing slashes
    # somehow confuse fzf or the do while. We use -E for portability with both
    # mac and unix.
      sed -E -e 's/^[[:space:]]*[0-9]*\*?[[:space:]]*//' -e 's/\\+$//' | \
      rg "^${match_prefix}" --color=never --no-line-number |
# Use gawk rather than awk here for portability. On mac this requires you to
# first install gawk, eg `brew install gawk`.
gawk -v match_prefix=${match_prefix} ' { for (i = 1; i <= NF; i++) {
  flag = ""
  is_value = ""
  maybe_value = ""

  if ($i ~ /^\\\\n/) {
    # Then this begins might be the first line after a continuation and begin
    # like "\\n--foo". We want this to be interpreted as if fresh, without a new
    # line.
    $i = gensub(/^\\\\n/, "", "g", $i)
  }

  if ($i ~ /^--?[a-zA-Z0-9]/) {
    # Then it looks like a flag.
    split($i, parts, "=")
    if (parts[2] != "") {
      # It is something like --flag=value
      flag = parts[1]
      is_value = parts[2]
    } else {
      # It is something like -f, and might be -f val.
      flag = $i
      maybe_value = $(i+1)
      if (maybe_value ~ /^\\\\n/) {
        # Then we probably consumed the next line in a line continuation.
        # Newlines in output will confuse a later process, so remove this.
        maybe_value = gensub(/^\\\\n/, "", "g", maybe_value)
      }
      if (maybe_value ~ /^--?[a-zA-Z0-9]/) {
        # Then we probably consumed another flag, eg `--foo` from
        # `--foo --bar=val`. Reset to empty string so we do not print that as an
        # option, as if `-foo` took the value `--bar=val`.
        maybe_value = ""
      }
    }

    # Colorize the part that we will not match in the output to make clear
    # we are matching only the leading flags.
    cmd_with_color = "\033[0;35m" $0 "\033[0m"

    # A note on the \xC2\xA0 strings here: we want a nbsp before the command so
    # that we can split easily and pull out the flag rather than the entire
    # line. This also allows us to tell fzf --nth and select only the first
    # column to search on. This is the nbsp notation that awk is able to output.
    # Fzf wants a \u00a0 format, which we use elsehwere, but note that these are
    # the same character.
    if (flag != "") {
      # Then we parsed a flag.

      # Print the flag itself.
      if (seen_arr[flag] != 1) {
        seen_arr[flag] = 1
        print flag "\xC2\xA0" cmd_with_color
      }

      if (is_value != "") {
        # The whole token is a valid value.
        if (seen_arr[$i] != 1) {
          seen_arr[$i] = 1
          print $i "\xC2\xA0" cmd_with_color
        }
      }
      if (maybe_value != "") {
        # We guessed at a value.
        output_with_guessed_value = flag " " maybe_value
        if (seen_arr[output_with_guessed_value] != 1) {
          seen_arr[output_with_guessed_value] = 1
          print flag " " maybe_value "\xC2\xA0 " cmd_with_color
        }
      }
    }
  } else {
    continue
  }
}
}'

}

_fzf_complete_fooflag() {
  _fzf_complete --ansi --multi -- "" "$@" < <(_find_flags)
}

# CTRL-Q - Paste the selected flags into the command line. Copied from CTRL-T
# bindings shown here:
# https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh
__flagsel() {
  # Normally, BUFFER is adequate. However, if we're in a line continutation, as
  # indicated by CONTEXT=cont, we want PREBUFFER:
  # https://linux.die.net/man/1/zshzle.
  local buffer_with_start_of_cmd=${BUFFER}
  if [[ $CONTEXT == "cont" ]]; then
    buffer_with_start_of_cmd=${PREBUFFER}
  fi
  # echo "bwsoc: |${buffer_with_start_of_cmd}|"
  # First we tr to remove new lines. and whitespace, which can trip us up on
  # multiline input like continuations. Then we use sed to replace white space
  # with space, which we will use as our delimiter to cut.
  local match_prefix=`echo ${buffer_with_start_of_cmd} | tr "\n" " " | sed -e "s/[[:space:]]\+/ /g" -e "s/\n/ /g" | cut -d ' ' -f 1`
  local cmd="_find_flags ${match_prefix}"
  setopt localoptions pipefail no_aliases 2> /dev/null
  local item
  # Need to set this outside the surrounding string to enable $'' notation so
  # fzf is able to interpret the delimiter correctly.
  local delimiter_arg=$'--delimiter \u00a0'
  eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --prompt='${match_prefix}> ' ${delimiter_arg} --nth 1 --reverse --multi --ansi $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" $(__fzfcmd) -m "$@" | while read item; do
    echo -n "${item}" | awk -F '\xC2\xA0' '{ if (NF > 1) { printf "%s ", $1 } }'
  done
  local ret=$?
  echo
  return $ret
}

fzf-flag-widget() {
  LBUFFER="${LBUFFER}$(__flagsel)"
  local ret=$?
  zle reset-prompt
  return $ret
}
zle     -N   fzf-flag-widget
bindkey '^Q' fzf-flag-widget

# Global Alias stuff. From:
# https://github.com/gotbletu/shownotes/blob/master/zsh_global_alias_expansion.md
# Automatically Expanding Global Aliases (Space key to expand)
globalias() {
  if [[ $LBUFFER =~ '[A-Z0-9]+$' ]]; then
    zle _expand_alias
    zle expand-word
  fi
  zle self-insert
}
zle -N globalias
bindkey " " globalias                 # space key to expand globalalias
# bindkey "^ " magic-space            # control-space to bypass completion
bindkey "^[[Z" magic-space            # shift-tab to bypass completion
bindkey -M isearch " " magic-space    # normal space during searches

# use a pager for ripgrep.
# https://github.com/BurntSushi/ripgrep/issues/86#issuecomment-364968686
rg() {
  if [ -t 1 ]; then
    command rg -p "$@" | less -RFX
  else
    command rg "$@"
  fi
}

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

export PATH="$PATH:$HOME/.local/bin" # for nvr

# Adding flutter sdk to path.
export PATH=${PATH}:/Users/sudars/code/flutter/bin

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

##############################################################################
# Machine and platform specific configuration.
##############################################################################

# Here we'll start custom sourcing zshrc files based on which machine we're on.
# Platform is sourced first, to attempt to allow overrides for more
# machine-specific configuration.
#
# Platform-specific configuration is based on the output of `uname -s`.
#
# As for machine-specific, there are several ways to do this. Some of my
# machines, namely my meerkat, consistently returns 'sam-meerkat' when running
# `hostname`. My mbair does not. For now, I am going to adopt a convention
# where each machine has its own name (e.g. mbair, meerkat). Each machine
# indicates it existence by the presences of a file named
# "~/.zshMachineFlag_machineName". E.g. mbair would, upon first time
# initialization, execute `touch ~/.zshMachineFlag_mbair`. That is then added
# to the if statement below and sourced as appropriate.
#
# For more configuration instructions, see my dotfiles and prezto READMEs.


# =================
# Platform Specific
# =================

func source_platform_file() {
  local platform
  platform="$(uname -s)"

  case $platform in
    Linux)
      source "${ZDOTDIR:-$HOME}"/.zprezto/machine-specific/linux_zshrc
      ;;
    Darwin)
      source "${ZDOTDIR:-$HOME}"/.zprezto/machine-specific/osx_zshrc
      ;;
  esac
}

source_platform_file

func is_linux() {
  local platform
  platform="$(uname -s)"
  if [[ ${platform} = Linux ]]
  then
    return 0
  else
    return 1
  fi
}

func is_mac() {
  local platform
  platform="$(uname -s)"
  if [[ ${platform} = Darwin ]]
  then
    return 0
  else
    return 1
  fi
}


# ================
# Machine Specific
# ================

if [[ -a ~/.zshMachineFlag_mbair ]]; then
  source "${ZDOTDIR:-$HOME}"/.zprezto/machine-specific/mbair_zshrc
fi

if [[ -a ~/.zshMachineFlag_meerkat ]]; then
  source "${ZDOTDIR:-$HOME}"/.zprezto/machine-specific/meerkat_zshrc
fi

if [[ -a ~/.zshMachineFlag_mbpro_poorwill ]]; then
  source "${ZDOTDIR:-$HOME}"/.zprezto/machine-specific/mbpro_poorwill_zshrc
fi

if [[ -a ~/.zshMachineFlag_worklinux ]]; then
  source "${ZDOTDIR:-$HOME}"/.zshrc-glinux
fi


##############################################################################
# END Machine and platform specific configuration.
##############################################################################
